From d3be3b6d8737c85a2369c0fccb1697c35b6354a5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Se=C3=A1n=20C=20McCord?= <ulexus@gmail.com>
Date: Sun, 27 Oct 2019 19:39:49 -0400
Subject: [PATCH] updates of asterisk from gerrit

---
 asterisk/apps/app_audiosocket.c             | 181 +++++++++--------
 asterisk/channels/chan_audiosocket.c        | 105 ++++------
 asterisk/include/asterisk/res_audiosocket.h |   2 +-
 asterisk/res/res_audiosocket.c              | 204 ++++++++++----------
 asterisk/res/res_audiosocket.exports.in     |   2 -
 5 files changed, 250 insertions(+), 244 deletions(-)

diff --git a/asterisk/apps/app_audiosocket.c b/asterisk/apps/app_audiosocket.c
index afed074..b51ebfc 100644
--- a/asterisk/apps/app_audiosocket.c
+++ b/asterisk/apps/app_audiosocket.c
@@ -38,7 +38,6 @@
 #include "asterisk/module.h"
 #include "asterisk/channel.h"
 #include "asterisk/app.h"
-#include "asterisk/uuid.h"
 #include "asterisk/res_audiosocket.h"
 #include "asterisk/utils.h"
 #include "asterisk/format_cache.h"
@@ -46,7 +45,6 @@
 #define AST_MODULE "app_audiosocket"
 #define AUDIOSOCKET_CONFIG "audiosocket.conf"
 #define MAX_CONNECT_TIMEOUT_MSEC 2000
-#define CHANNEL_INPUT_TIMEOUT_MS 5000
 
 /*** DOCUMENTATION
 	<application name="AudioSocket" language="en_US">
@@ -55,17 +53,16 @@
 		</synopsis>
 		<syntax>
 			<parameter name="uuid" required="true">
-            <para>UUID is the universally-unique identifier of the call for the audio socket service.  This ID must conform to the string form of a standard UUID.</para>
+				<para>UUID is the universally-unique identifier of the call for the audio socket service.  This ID must conform to the string form of a standard UUID.</para>
 			</parameter>
 			<parameter name="service" required="true">
-            <para>Service is the name or IP address and port number of the audio socket service to which this call should be connected.  This should be in the form host:port, such as myserver:9019 </para>
+				<para>Service is the name or IP address and port number of the audio socket service to which this call should be connected.  This should be in the form host:port, such as myserver:9019 </para>
 			</parameter>
-      </syntax>
+		</syntax>
 		<description>
 			<para>Connects to the given TCP service, then transmits channel audio over that socket.  In turn, audio is received from the socket and sent to the channel.  Only audio frames will be transmitted.</para>
-         <para>Protocol is specified at https://github.com/CyCoreSystems/audiosocket/.</para>
-			<para>This application does not automatically answer and should generally be
-			preceeded by an application such as Answer() or Progress().</para>
+			<para>Protocol is specified at https://wiki.asterisk.org/wiki/display/AST/AudioSocket</para>
+			<para>This application does not automatically answer and should generally be preceeded by an application such as Answer() or Progress().</para>
 		</description>
 	</application>
  ***/
@@ -77,20 +74,20 @@ static int audiosocket_run(struct ast_channel *chan, const char *id, const int s
 static int audiosocket_exec(struct ast_channel *chan, const char *data)
 {
 	char *parse;
-    struct ast_format *readFormat,*writeFormat;
+	struct ast_format *readFormat, *writeFormat;
+	const char *chanName;
+	int res;
 
 	AST_DECLARE_APP_ARGS(args,
-        AST_APP_ARG(idStr);
-        AST_APP_ARG(server);
-    );
+		AST_APP_ARG(idStr);
+		AST_APP_ARG(server);
+	);
 
 	int s = 0;
-	struct ast_uuid *id = NULL;
+	uuid_t uu;
 
-    if (ast_channel_state(chan) != AST_STATE_UP) {
-        ast_log(LOG_WARNING, "AudioSocket cannot continue if channel not UP");
-        return -1;
-    }
+
+	chanName = ast_channel_name(chan);
 
 	/* Parse and validate arguments */
 	parse = ast_strdupa(data);
@@ -99,88 +96,120 @@ static int audiosocket_exec(struct ast_channel *chan, const char *data)
 		ast_log(LOG_ERROR, "UUID is required\n");
 		return -1;
 	}
-	if ((id = ast_str_to_uuid(args.idStr)) == NULL) {
-		ast_log(LOG_ERROR, "UUID '%s' could not be parsed\n", args.idStr);
+	if (uuid_parse(args.idStr, uu)) {
+		ast_log(LOG_ERROR, "Failed to parse UUID '%s'\n", args.idStr);
 		return -1;
 	}
 	if ((s = ast_audiosocket_connect(args.server, chan)) < 0) {
-		ast_log(LOG_ERROR, "failed to connect to AudioSocket\n");
-        return -1;
+		/* The res module will already output a log message, so another is not needed */
+		return -1;
 	}
 
-    writeFormat = ast_channel_writeformat(chan);
-    readFormat = ast_channel_readformat(chan);
+	writeFormat = ao2_bump(ast_channel_writeformat(chan));
+	readFormat = ao2_bump(ast_channel_readformat(chan));
+
 	if (ast_set_write_format(chan, ast_format_slin)) {
-		ast_log(LOG_ERROR, "failed to set write format to SLINEAR\n");
+		ast_log(LOG_ERROR, "Failed to set write format to SLINEAR for channel %s\n", chanName);
+		ao2_ref(writeFormat, -1);
+		ao2_ref(readFormat, -1);
 		return -1;
 	}
 	if (ast_set_read_format(chan, ast_format_slin)) {
-		ast_log(LOG_ERROR, "failed to set read format to SLINEAR\n");
-
-        /* Attempt to restore previous write format even though it is likely to
-           fail, since setting the read format did.
-        */
-        if (ast_set_write_format(chan, writeFormat)) {
-            ast_log(LOG_ERROR, "failed to restore write format\n");
-        }
+		ast_log(LOG_ERROR, "Failed to set read format to SLINEAR for channel %s\n", chanName);
+
+		/* Attempt to restore previous write format even though it is likely to
+		 * fail, since setting the read format did.
+		 */
+		if (ast_set_write_format(chan, writeFormat)) {
+			ast_log(LOG_ERROR, "Failed to restore write format for channel %s\n", chanName);
+		}
+		ao2_ref(writeFormat, -1);
+		ao2_ref(readFormat, -1);
 		return -1;
 	}
 
-	audiosocket_run(chan, args.idStr, s);
+	res = audiosocket_run(chan, args.idStr, s);
+	/* On non-zero return, report failure */
+	if (res) {
+		/* Restore previous formats and close the connection */
+		if (ast_set_write_format(chan, writeFormat)) {
+			ast_log(LOG_ERROR, "Failed to restore write format for channel %s\n", chanName);
+		}
+		if (ast_set_read_format(chan, readFormat)) {
+			ast_log(LOG_ERROR, "Failed to restore read format for channel %s\n", chanName);
+		}
+		ao2_ref(writeFormat, -1);
+		ao2_ref(readFormat, -1);
+		close(s);
+		return res;
+	}
 	close(s);
 
-    if (ast_set_write_format(chan, writeFormat)) {
-        ast_log(LOG_ERROR, "failed to store write format\n");
-    }
-    if (ast_set_read_format(chan, readFormat)) {
-        ast_log(LOG_ERROR, "failed to store read format\n");
-    }
+	if (ast_set_write_format(chan, writeFormat)) {
+		ast_log(LOG_ERROR, "Failed to restore write format for channel %s\n", chanName);
+	}
+	if (ast_set_read_format(chan, readFormat)) {
+		ast_log(LOG_ERROR, "Failed to restore read format for channel %s\n", chanName);
+	}
+	ao2_ref(writeFormat, -1);
+	ao2_ref(readFormat, -1);
 
 	return 0;
 }
 
-static int audiosocket_run(struct ast_channel *chan, const char *id, const int svc)
+static int audiosocket_run(struct ast_channel *chan, const char *id, int svc)
 {
-    if (ast_channel_state(chan) != AST_STATE_UP) {
-        return 0;
-    }
+	const char *chanName;
 
+	if (!chan || ast_channel_state(chan) != AST_STATE_UP) {
+		return -1;
+	}
 
 	if (ast_audiosocket_init(svc, id)) {
-		return 1;
+		return -1;
 	}
 
-	while (ast_waitfor(chan, CHANNEL_INPUT_TIMEOUT_MS) > -1) {
-		struct ast_frame *f = NULL;
+	chanName = ast_channel_name(chan);
 
-		f = ast_read(chan);
-		if (!f) {
-			return 0;
-		}
+	while (1) {
+		struct ast_channel *targetChan;
+		int ms = 0;
+		int outfd = 0;
+		struct ast_frame *f;
 
-		if (f->frametype == AST_FRAME_VOICE) {
+		targetChan = ast_waitfor_nandfds(&chan, 1, &svc, 1, NULL, &outfd, &ms);
+		if (targetChan) {
+			f = ast_read(chan);
+			if (!f) {
+				return -1;
+			}
 
-			/* Send audio frame to audiosocket */
-			if (ast_audiosocket_send_frame(svc, f)) {
-				ast_log(LOG_ERROR, "failed to forward channel frame to AudioSocket\n");
-				ast_frfree(f);
-				return 1;
+			if (f->frametype == AST_FRAME_VOICE) {
+				/* Send audio frame to audiosocket */
+				if (ast_audiosocket_send_frame(svc, f)) {
+					ast_log(LOG_ERROR, "Failed to forward channel frame from %s to AudioSocket\n",
+						chanName);
+					ast_frfree(f);
+					return -1;
+				}
 			}
+			ast_frfree(f);
 		}
 
-		ast_frfree(f);
-
-		/* Send audiosocket data to channel */
-		if (!(f = ast_audiosocket_receive_frame(svc))) {
-			ast_log(LOG_ERROR, "failed to receive frame from AudioSocket message\n");
-			return 1;
-		}
-		if (ast_write(chan, f)) {
-			ast_log(LOG_WARNING, "failed to forward frame to channel\n");
-            ast_frfree(f);
-			return 1;
+		if (outfd >= 0) {
+			f = ast_audiosocket_receive_frame(svc);
+			if (!f) {
+				ast_log(LOG_ERROR, "Failed to receive frame from AudioSocket message for"
+					"channel %s\n", chanName);
+				return -1;
+			}
+			if (ast_write(chan, f)) {
+				ast_log(LOG_WARNING, "Failed to forward frame to channel %s\n", chanName);
+				ast_frfree(f);
+				return -1;
+			}
+			ast_frfree(f);
 		}
-        ast_frfree(f);
 	}
 	return 0;
 }
@@ -196,12 +225,12 @@ static int load_module(void)
 }
 
 AST_MODULE_INFO(
-    ASTERISK_GPL_KEY,
-    AST_MODFLAG_LOAD_ORDER,
-    "AudioSocket Application",
-    .support_level = AST_MODULE_SUPPORT_EXTENDED,
-    .load =	load_module,
-    .unload = unload_module,
-    .load_pri =	AST_MODPRI_CHANNEL_DRIVER,
-    .requires = "res_audiosocket",
+	ASTERISK_GPL_KEY,
+	AST_MODFLAG_LOAD_ORDER,
+	"AudioSocket Application",
+	.support_level = AST_MODULE_SUPPORT_EXTENDED,
+	.load =	load_module,
+	.unload = unload_module,
+	.load_pri = AST_MODPRI_CHANNEL_DRIVER,
+	.requires = "res_audiosocket",
 );
diff --git a/asterisk/channels/chan_audiosocket.c b/asterisk/channels/chan_audiosocket.c
index bb11888..677127f 100644
--- a/asterisk/channels/chan_audiosocket.c
+++ b/asterisk/channels/chan_audiosocket.c
@@ -35,7 +35,6 @@
 
 #include "asterisk/channel.h"
 #include "asterisk/module.h"
-#include "asterisk/uuid.h"
 #include "asterisk/res_audiosocket.h"
 #include "asterisk/pbx.h"
 #include "asterisk/acl.h"
@@ -43,17 +42,17 @@
 #include "asterisk/causes.h"
 #include "asterisk/format_cache.h"
 
+#define FD_OUTPUT 1	/* A fd of -1 means an error, 0 is stdin */
+
 struct audiosocket_instance {
-	int svc;
-	char id[38];
+	int svc;	/* The file descriptor for the AudioSocket instance */
+	char id[38];	/* The UUID identifying this AudioSocket instance */
 } audiosocket_instance;
 
 /* Forward declarations */
 static struct ast_channel *audiosocket_request(const char *type,
-											   struct ast_format_cap *cap,
-											   const struct ast_assigned_ids *assignedids,
-											   const struct ast_channel *requestor,
-											   const char *data, int *cause);
+	struct ast_format_cap *cap, const struct ast_assigned_ids *assignedids,
+	const struct ast_channel *requestor, const char *data, int *cause);
 static int audiosocket_call(struct ast_channel *ast, const char *dest, int timeout);
 static int audiosocket_hangup(struct ast_channel *ast);
 static struct ast_frame *audiosocket_read(struct ast_channel *ast);
@@ -73,9 +72,11 @@ static struct ast_channel_tech audiosocket_channel_tech = {
 /*! \brief Function called when we should read a frame from the channel */
 static struct ast_frame *audiosocket_read(struct ast_channel *ast)
 {
-	struct audiosocket_instance *instance = ast_channel_tech_pvt(ast);
+	struct audiosocket_instance *instance;
 
-	if (instance == NULL || instance->svc < 1) {
+	/* The channel should always be present from the API */
+	instance = ast_channel_tech_pvt(ast);
+	if (instance == NULL || instance->svc < FD_OUTPUT) {
 		return NULL;
 	}
 	return ast_audiosocket_receive_frame(instance->svc);
@@ -84,8 +85,10 @@ static struct ast_frame *audiosocket_read(struct ast_channel *ast)
 /*! \brief Function called when we should write a frame to the channel */
 static int audiosocket_write(struct ast_channel *ast, struct ast_frame *f)
 {
-	struct audiosocket_instance *instance = ast_channel_tech_pvt(ast);
+	struct audiosocket_instance *instance;
 
+	/* The channel should always be present from the API */
+	instance = ast_channel_tech_pvt(ast);
 	if (instance == NULL || instance->svc < 1) {
 		return -1;
 	}
@@ -99,48 +102,41 @@ static int audiosocket_call(struct ast_channel *ast, const char *dest, int timeo
 
 	ast_queue_control(ast, AST_CONTROL_ANSWER);
 
-	if (ast_set_write_format(ast, ast_format_slin)) {
-		ast_log(LOG_ERROR, "Failed to set write format to SLINEAR\n");
-		return -1;
-	}
-	if (ast_set_read_format(ast, ast_format_slin)) {
-		ast_log(LOG_ERROR, "Failed to set read format to SLINEAR\n");
-		return -1;
-	}
-
 	return ast_audiosocket_init(instance->svc, instance->id);
 }
 
 /*! \brief Function called when we should hang the channel up */
 static int audiosocket_hangup(struct ast_channel *ast)
 {
-	struct audiosocket_instance *instance = ast_channel_tech_pvt(ast);
+	struct audiosocket_instance *instance;
 
+	/* The channel should always be present from the API */
+	instance = ast_channel_tech_pvt(ast);
 	if (instance != NULL && instance->svc > 0) {
 		close(instance->svc);
 	}
 
 	ast_channel_tech_pvt_set(ast, NULL);
+	ast_free(instance);
 
 	return 0;
 }
 
 /*! \brief Function called when we should prepare to call the unicast destination */
 static struct ast_channel *audiosocket_request(const char *type,
-											   struct ast_format_cap *cap,
-											   const struct ast_assigned_ids *assignedids,
-											   const struct ast_channel *requestor,
-											   const char *data, int *cause)
+	struct ast_format_cap *cap, const struct ast_assigned_ids *assignedids,
+	const struct ast_channel *requestor, const char *data, int *cause)
 {
 	char *parse;
 	struct audiosocket_instance *instance = NULL;
 	struct ast_sockaddr address;
 	struct ast_channel *chan;
-	struct ast_uuid *id = NULL;
+    uuid_t uu;
 	int fd;
-	AST_DECLARE_APP_ARGS(args, AST_APP_ARG(destination);
-						 AST_APP_ARG(idStr);
-		);
+	AST_DECLARE_APP_ARGS(args,
+		AST_APP_ARG(destination);
+		AST_APP_ARG(idStr);
+	);
 
 	if (ast_strlen_zero(data)) {
 		ast_log(LOG_ERROR, "Destination is required for the 'AudioSocket' channel\n");
@@ -163,11 +159,10 @@ static struct ast_channel *audiosocket_request(const char *type,
 		ast_log(LOG_ERROR, "UUID is required for the 'AudioSocket' channel\n");
 		goto failure;
 	}
-	if ((id = ast_str_to_uuid(args.idStr)) == NULL) {
-		ast_log(LOG_ERROR, "UUID '%s' could not be parsed\n", args.idStr);
+	if (uuid_parse(args.idStr, uu)) {
+		ast_log(LOG_ERROR, "Failed to parse UUID '%s'\n", args.idStr);
 		goto failure;
 	}
-	ast_free(id);
 
 	instance = ast_calloc(1, sizeof(*instance));
 	if (!instance) {
@@ -176,29 +171,13 @@ static struct ast_channel *audiosocket_request(const char *type,
 	}
 	ast_copy_string(instance->id, args.idStr, sizeof(instance->id));
 
-	if (ast_format_cap_iscompatible_format(cap, ast_format_slin) ==
-		AST_FORMAT_CMP_NOT_EQUAL) {
-		struct ast_str *cap_buf = ast_str_alloca(AST_FORMAT_CAP_NAMES_LEN);
-		if (cap_buf<0) {
-			ast_log(LOG_ERROR, "Failed to allocate AudioSocket capabilities buffer\n");
-			goto failure;
-		}
-
-		ast_log(LOG_NOTICE, "Asked to get a channel of unsupported format '%s'\n",
-				ast_format_cap_get_names(cap, &cap_buf));
-		goto failure;
-	}
-
 	if ((fd = ast_audiosocket_connect(args.destination, NULL)) < 0) {
-		ast_log(LOG_ERROR, "Failed to connect to AudioSocket server at '%s'\n",
-				args.destination);
 		goto failure;
 	}
 	instance->svc = fd;
 
 	chan = ast_channel_alloc(1, AST_STATE_DOWN, "", "", "", "", "", assignedids,
-							 requestor, 0, "AudioSocket/%s-%s", args.destination,
-							 args.idStr);
+		requestor, 0, "AudioSocket/%s-%s", args.destination, args.idStr);
 	if (!chan) {
 		goto failure;
 	}
@@ -219,16 +198,16 @@ static struct ast_channel *audiosocket_request(const char *type,
 
 	ast_channel_unlock(chan);
 
-    if (instance != NULL) {
-        ast_free(instance);
-    }
 	return chan;
 
-  failure:
+failure:
 	*cause = AST_CAUSE_FAILURE;
-    if (instance != NULL) {
-        ast_free(instance);
-    }
+	if (instance != NULL) {
+		ast_free(instance);
+		if (fd >= 0) {
+			close(fd);
+		}
+	}
 	return NULL;
 }
 
@@ -245,9 +224,7 @@ static int unload_module(void)
 /*! \brief Function called when our module is loaded */
 static int load_module(void)
 {
-	if (!
-		(audiosocket_channel_tech.capabilities =
-		 ast_format_cap_alloc(AST_FORMAT_CAP_FLAG_DEFAULT))) {
+	if (!(audiosocket_channel_tech.capabilities = ast_format_cap_alloc(AST_FORMAT_CAP_FLAG_DEFAULT))) {
 		return AST_MODULE_LOAD_DECLINE;
 	}
 	ast_format_cap_append(audiosocket_channel_tech.capabilities, ast_format_slin, 0);
@@ -262,10 +239,10 @@ static int load_module(void)
 }
 
 AST_MODULE_INFO(ASTERISK_GPL_KEY, AST_MODFLAG_LOAD_ORDER,
-    "AudioSocket Channel",
-    .support_level = AST_MODULE_SUPPORT_EXTENDED,
-    .load = load_module,
-    .unload = unload_module,
-    .load_pri = AST_MODPRI_CHANNEL_DRIVER,
-    .requires = "res_audiosocket",
+	"AudioSocket Channel",
+	.support_level = AST_MODULE_SUPPORT_EXTENDED,
+	.load = load_module,
+	.unload = unload_module,
+	.load_pri = AST_MODPRI_CHANNEL_DRIVER,
+	.requires = "res_audiosocket",
 );
diff --git a/asterisk/include/asterisk/res_audiosocket.h b/asterisk/include/asterisk/res_audiosocket.h
index 3f66e3f..0357bcd 100644
--- a/asterisk/include/asterisk/res_audiosocket.h
+++ b/asterisk/include/asterisk/res_audiosocket.h
@@ -40,7 +40,7 @@ extern "C" {
  * \brief Send the initial message to an AudioSocket server
  *
  * \param server The server address, including port.
- * \param server An optional channel which will be put into autoservice during
+ * \param chan An optional channel which will be put into autoservice during
  * the connection period.  If there is no channel to be autoserviced, pass NULL
  * instead.
  *
diff --git a/asterisk/res/res_audiosocket.c b/asterisk/res/res_audiosocket.c
index 850b1cd..a148161 100644
--- a/asterisk/res/res_audiosocket.c
+++ b/asterisk/res/res_audiosocket.c
@@ -43,9 +43,58 @@
 
 #define MAX_CONNECT_TIMEOUT_MSEC 2000
 
+/*!
+ * \internal
+ * \brief Attempt to complete the audiosocket connection.
+ *
+ * \param server Url that we are trying to connect to.
+ * \param addr Address that host was resolved to.
+ * \param netsockfd File descriptor of socket.
+ *
+ * \retval 0 when connection is succesful.
+ * \retval 1 when there is an error.
+ */
 static int handle_audiosocket_connection(const char *server,
-										 const struct ast_sockaddr addr,
-										 const int netsockfd);
+	const struct ast_sockaddr addr, const int netsockfd)
+{
+	struct pollfd pfds[1];
+	int res, conresult;
+	socklen_t reslen;
+
+	reslen = sizeof(conresult);
+
+	pfds[0].fd = netsockfd;
+	pfds[0].events = POLLOUT;
+
+	while ((res = ast_poll(pfds, 1, MAX_CONNECT_TIMEOUT_MSEC)) != 1) {
+		if (errno != EINTR) {
+			if (!res) {
+				ast_log(LOG_WARNING, "AudioSocket connection to '%s' timed"
+					"out after MAX_CONNECT_TIMEOUT_MSEC (%d) milliseconds.\n",
+					server, MAX_CONNECT_TIMEOUT_MSEC);
+			} else {
+				ast_log(LOG_WARNING, "Connect to '%s' failed: %s\n", server,
+					strerror(errno));
+			}
+
+			return -1;
+		}
+	}
+
+	if (getsockopt(pfds[0].fd, SOL_SOCKET, SO_ERROR, &conresult, &reslen) < 0) {
+		ast_log(LOG_WARNING, "Connection to %s failed with error: %s\n",
+			ast_sockaddr_stringify(&addr), strerror(errno));
+		return -1;
+	}
+
+	if (conresult) {
+		ast_log(LOG_WARNING, "Connecting to '%s' failed for url '%s': %s\n",
+			ast_sockaddr_stringify(&addr), server, strerror(conresult));
+		return -1;
+	}
+
+	return 0;
+}
 
 const int ast_audiosocket_connect(const char *server, struct ast_channel *chan)
 {
@@ -54,31 +103,39 @@ const int ast_audiosocket_connect(const char *server, struct ast_channel *chan)
 	int num_addrs = 0, i = 0;
 
 	if (chan && ast_autoservice_start(chan) < 0) {
-		ast_log(LOG_WARNING,
-            "failed to start autoservice for channel %s\n", ast_channel_name(chan));
-        goto end;
+		ast_log(LOG_WARNING, "Failed to start autoservice for channel "
+			"%s\n", ast_channel_name(chan));
+		goto end;
 	}
 
 	if (ast_strlen_zero(server)) {
-		ast_log(LOG_ERROR, "no AudioSocket server provided");
-        goto end;
+		ast_log(LOG_ERROR, "No AudioSocket server provided\n");
+		goto end;
 	}
-    if (!(num_addrs = ast_sockaddr_resolve(&addrs, server, PARSE_PORT_REQUIRE,
-                    AST_AF_UNSPEC))) {
-		ast_log(LOG_ERROR, "failed to resolve AudioSocket service");
-        goto end;
+
+	if (!(num_addrs = ast_sockaddr_resolve(&addrs, server, PARSE_PORT_REQUIRE,
+		AST_AF_UNSPEC))) {
+		ast_log(LOG_ERROR, "Failed to resolve AudioSocket service using %s - "
+			"requires a valid hostname and port\n", server);
+		goto end;
 	}
 
 	/* Connect to AudioSocket service */
 	for (i = 0; i < num_addrs; i++) {
+
 		if (!ast_sockaddr_port(&addrs[i])) {
-			ast_log(LOG_WARNING, "no port provided");
-			continue;
+			/* If there's no port, other addresses should have the
+			 * same problem. Stop here.
+			 */
+			ast_log(LOG_ERROR, "No port provided for %s\n",
+				ast_sockaddr_stringify(&addrs[i]));
+			s = -1;
+			goto end;
 		}
 
-        if ((s = ast_socket_nonblock(addrs[i].ss.ss_family, SOCK_STREAM,
-                        IPPROTO_TCP)) < 0) {
-			ast_log(LOG_WARNING, "unable to create socket: %s\n", strerror(errno));
+		if ((s = ast_socket_nonblock(addrs[i].ss.ss_family, SOCK_STREAM,
+			IPPROTO_TCP)) < 0) {
+			ast_log(LOG_WARNING, "Unable to create socket: %s\n", strerror(errno));
 			continue;
 		}
 
@@ -90,82 +147,30 @@ const int ast_audiosocket_connect(const char *server, struct ast_channel *chan)
 			}
 
 		} else {
-			ast_log(LOG_ERROR, "connection to %s failed with unexpected error: %s\n",
-			    ast_sockaddr_stringify(&addrs[i]), strerror(errno));
+			ast_log(LOG_ERROR, "Connection to %s failed with unexpected error: %s\n",
+				ast_sockaddr_stringify(&addrs[i]), strerror(errno));
 		}
 
 		break;
 	}
 
 end:
-    if (addrs) {
-        ast_free(addrs);
-    }
-    if (chan && ast_autoservice_stop(chan) < 0) {
-        ast_log(LOG_WARNING, "failed to stop autoservice for channel %s\n",
-                ast_channel_name(chan));
-    }
-
-	if (i == num_addrs) {
-		ast_log(LOG_ERROR, "failed to connect to AudioSocket service");
-		return -1;
+	if (addrs) {
+		ast_free(addrs);
 	}
 
-	return s;
-}
-
-/*!
- * \internal
- * \brief Attempt to complete the audiosocket connection.
- *
- * \param server Url that we are trying to connect to.
- * \param addr Address that host was resolved to.
- * \param netsockfd File descriptor of socket.
- *
- * \retval 0 when connection is succesful.
- * \retval 1 when there is an error.
- */
-static int handle_audiosocket_connection(const char *server,
-										 const struct ast_sockaddr addr,
-										 const int netsockfd)
-{
-	struct pollfd pfds[1];
-	int res, conresult;
-	socklen_t reslen;
-
-	reslen = sizeof(conresult);
-
-	pfds[0].fd = netsockfd;
-	pfds[0].events = POLLOUT;
-
-	while ((res = ast_poll(pfds, 1, MAX_CONNECT_TIMEOUT_MSEC)) != 1) {
-		if (errno != EINTR) {
-			if (!res) {
-				ast_log(LOG_WARNING,
-						"AudioSocket connection to '%s' timed out after MAX_CONNECT_TIMEOUT_MSEC (%d) milliseconds.\n",
-						server, MAX_CONNECT_TIMEOUT_MSEC);
-			} else {
-				ast_log(LOG_WARNING, "Connect to '%s' failed: %s\n", server,
-						strerror(errno));
-			}
-
-			return -1;
-		}
-	}
-
-	if (getsockopt(pfds[0].fd, SOL_SOCKET, SO_ERROR, &conresult, &reslen) < 0) {
-		ast_log(LOG_WARNING, "connection to %s failed with error: %s\n",
-				ast_sockaddr_stringify(&addr), strerror(errno));
+	if (chan && ast_autoservice_stop(chan) < 0) {
+		ast_log(LOG_WARNING, "Failed to stop autoservice for channel %s\n",
+		ast_channel_name(chan));
 		return -1;
 	}
 
-	if (conresult) {
-		ast_log(LOG_WARNING, "connecting to '%s' failed for url '%s': %s\n",
-				ast_sockaddr_stringify(&addr), server, strerror(conresult));
+	if (i == num_addrs) {
+		ast_log(LOG_ERROR, "Failed to connect to AudioSocket service\n");
 		return -1;
 	}
 
-	return 0;
+	return s;
 }
 
 const int ast_audiosocket_init(const int svc, const char *id)
@@ -175,7 +180,7 @@ const int ast_audiosocket_init(const int svc, const char *id)
 	uint8_t buf[3 + 16];
 
 	if (ast_strlen_zero(id)) {
-		ast_log(LOG_ERROR, "No UUID for AudioSocket");
+		ast_log(LOG_ERROR, "No UUID for AudioSocket\n");
 		return -1;
 	}
 
@@ -190,7 +195,7 @@ const int ast_audiosocket_init(const int svc, const char *id)
 	memcpy(buf + 3, uu, 16);
 
 	if (write(svc, buf, 3 + 16) != 3 + 16) {
-		ast_log(LOG_WARNING, "Failed to write data to AudioSocket");
+		ast_log(LOG_WARNING, "Failed to write data to AudioSocket\n");
 		ret = -1;
 	}
 
@@ -200,13 +205,9 @@ const int ast_audiosocket_init(const int svc, const char *id)
 const int ast_audiosocket_send_frame(const int svc, const struct ast_frame *f)
 {
 	int ret = 0;
-	uint8_t kind = 0x10;		/* always 16-bit, 8kHz signed linear mono, for now */
-	uint8_t *buf, *p;
-
-	if (!(buf = ast_malloc(3 + f->datalen))) {
-		ast_log(LOG_ERROR, "Failed to allocate buffer for AudioSocket message\n");
-		return -1;
-	}
+	uint8_t kind = 0x10;	/* always 16-bit, 8kHz signed linear mono, for now */
+	uint8_t *p;
+	uint8_t buf[3 + f->datalen];
 
 	p = buf;
 
@@ -216,11 +217,10 @@ const int ast_audiosocket_send_frame(const int svc, const struct ast_frame *f)
 	memcpy(p, f->data.ptr, f->datalen);
 
 	if (write(svc, buf, 3 + f->datalen) != 3 + f->datalen) {
-		ast_log(LOG_WARNING, "Failed to write data to AudioSocket");
+		ast_log(LOG_WARNING, "Failed to write data to AudioSocket\n");
 		ret = -1;
 	}
 
-	ast_free(buf);
 	return ret;
 }
 
@@ -228,8 +228,12 @@ struct ast_frame *ast_audiosocket_receive_frame(const int svc)
 {
 
 	int i = 0, n = 0, ret = 0, not_audio = 0;
-	struct ast_frame f;
-
+	struct ast_frame f = {
+		.frametype = AST_FRAME_VOICE,
+		.subclass.format = ast_format_slin,
+		.src = "AudioSocket",
+		.mallocd = AST_MALLOCD_DATA,
+	};
 	uint8_t kind;
 	uint8_t len_high;
 	uint8_t len_low;
@@ -299,22 +303,20 @@ struct ast_frame *ast_audiosocket_receive_frame(const int svc)
 	}
 
 	if (ret != 0) {
+		ast_free(data);
 		return NULL;
 	}
 
 	if (not_audio) {
+		ast_free(data);
 		return &ast_null_frame;
 	}
 
-
-	f.frametype = AST_FRAME_VOICE;
-	f.subclass.format = ast_format_slin;
-	f.src = "AudioSocket";
 	f.data.ptr = data;
 	f.datalen = len;
 	f.samples = len / 2;
-	f.mallocd = AST_MALLOCD_DATA;
 
+	/* The frame steals data, so it doesn't need to be freed here */
 	return ast_frisolate(&f);
 }
 
@@ -331,9 +333,9 @@ static int unload_module(void)
 }
 
 AST_MODULE_INFO(ASTERISK_GPL_KEY, AST_MODFLAG_GLOBAL_SYMBOLS | AST_MODFLAG_LOAD_ORDER,
-    "AudioSocket support",
-    .support_level = AST_MODULE_SUPPORT_EXTENDED,
-    .load = load_module,
-    .unload = unload_module,
-    .load_pri = AST_MODPRI_CHANNEL_DEPEND,
+	"AudioSocket support",
+	.support_level = AST_MODULE_SUPPORT_EXTENDED,
+	.load = load_module,
+	.unload = unload_module,
+	.load_pri = AST_MODPRI_CHANNEL_DEPEND,
 );
diff --git a/asterisk/res/res_audiosocket.exports.in b/asterisk/res/res_audiosocket.exports.in
index 36130d3..3f922bc 100644
--- a/asterisk/res/res_audiosocket.exports.in
+++ b/asterisk/res/res_audiosocket.exports.in
@@ -4,6 +4,4 @@
 		LINKER_SYMBOL_PREFIXast_audiosocket_init;
 		LINKER_SYMBOL_PREFIXast_audiosocket_send_frame;
 		LINKER_SYMBOL_PREFIX*ast_audiosocket_receive_frame;
-	local:
-		*;
 };
